import subprocess
from langchain_core.tools import tool
import shlex # For safer command splitting if needed, though shell=True bypasses this here
@tool
def run_windows_command(command: str):
    """Executes a given command in the Windows terminal (cmd.exe).

    ðŸš¨ SECURITY WARNING: This tool allows the execution of arbitrary commands
    on the system where the agent is running. This is potentially VERY DANGEROUS.
    Enable and use with extreme caution.
    It can be used for tasks like changing directories (cd), listing files (dir),
    creating directories (mkdir), deleting files (del), etc.

    Args:
        command: The command string to execute (e.g., 'dir C:\\Users', 'cd D:\\projects && dir', 'del temp.txt').

    Returns:
        A string containing the standard output and standard error from the command execution.
    """
    if not command:
        return "Error: No command provided."

    print(f"Executing Windows command: {command}")
    try:
        # Using shell=True is necessary for commands like 'cd' to work across a single logical execution,
        # but it carries security risks if the command string is constructed from untrusted input.
        # Ensure the commands generated by the LLM are carefully reviewed or constrained.
        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=False, timeout=60)

        output = f"Command: {command}\nExit Code: {result.returncode}\n"
        if result.stdout:
            output += f"--- stdout ---\n{result.stdout.strip()}\n"
        if result.stderr:
            output += f"--- stderr ---\n{result.stderr.strip()}\n"

        return output.strip()

    except FileNotFoundError:
        return f"Error: Command not found or invalid command structure: {command}"
    except subprocess.TimeoutExpired:
        return f"Error: Command '{command}' timed out after 60 seconds."
    except Exception as e:
        return f"Error executing command '{command}': {e}"
